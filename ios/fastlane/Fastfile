default_platform(:ios)

project_name= "ReactNativeCacheCocoapods"
scheme = project_name
build_configuration = "Release"
project_path = "./ReactNativeCacheCocoapods.xcodeproj"

platform :ios do
  desc "Build iOS"
  lane :build do
      gym(
        scheme: scheme,
        workspace: "./#{project_name}.xcworkspace",
        configuration: build_configuration,
        clean: true
      )
  end

  desc "Build iOS with caching"
    lane :cached_build do

      puts "### Step: init"
      
      # !!! Path to the folder that you will cache on CI !!!
      ios_derived_data_path = File.expand_path("../.local_derived_data")
      cache_folder = File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/#{scheme}/BuildProductsPath/#{build_configuration}-iphoneos")

      puts "### Step:Code Sign"
      # Code sign ...

      # Step 0) Check if cache exists 

      puts "### Step: Check if cache exists "
      if(File.exist?(cache_folder))
        # Step 1) Apply a fix of "Copy Pods Resources" Build Phase

        # Before:
        # "${PODS_ROOT}/Target Support Files/Pods-MyApp/Pods-MyApp-resources.sh"
        #
        # After:
        # BUILT_PRODUCTS_DIR=/a/b/c "${PODS_ROOT}/Target Support Files/Pods-MyApp/Pods-MyApp-resources.sh"

        fastlane_require 'xcodeproj'
        project = Xcodeproj::Project.open("../#{project_name}.xcodeproj")
        target = project.targets.select { |target| target.name == project_name }.first
        phase = target.shell_script_build_phases.select { |phase| phase.name && phase.name.include?('Copy Pods Resources') }.first
        if (!phase.shell_script.start_with?('BUILT_PRODUCTS_DIR'))
          phase.shell_script = "BUILT_PRODUCTS_DIR=#{cache_folder} #{phase.shell_script}"
          project.save()
        end

        puts "### Step: Build only .xcodeproj"
        # Step 2) Build only .xcodeproj 
        gym(
          clean: false,
          project: "./#{project_name}.xcodeproj",
          scheme: scheme,
          configuration: build_configuration,
          destination: 'generic/platform=iOS',
          export_options: {
            compileBitcode: false,
            uploadBitcode: false,
            uploadSymbols: false 
          },
          xcargs: [
              # Step 3) Provide paths where xcode can't find pods binaries
              "PODS_CONFIGURATION_BUILD_DIR=#{cache_folder}",
              "FRAMEWORK_SEARCH_PATHS='#{cache_folder} $(inherited)'",
              "LIBRARY_SEARCH_PATHS='#{cache_folder} $(inherited)'",
              "SWIFT_INCLUDE_PATHS=#{cache_folder}"
          ].join(" ")
        )
      else

        puts "### Step: Build full app .xcworkspace"
        # Step 4) Build full app .xcworkspace
        gym(
          scheme: scheme,
          workspace: "./ReactNativeCacheCocoapods.xcworkspace",
          derived_data_path: ios_derived_data_path,
          configuration: build_configuration,
          clean: true
        )

        # Step 5) Remove not a Pods binaries to reduce cache size
        puts "### Step: Remove not a Pods binaries to reduce cache size"
        require 'fileutils';
        dirs = [
          File.expand_path("#{ios_derived_data_path}/info.plist"),
          File.expand_path("#{ios_derived_data_path}/Logs"),
          File.expand_path("#{ios_derived_data_path}/SourcePackages"),
          File.expand_path("#{ios_derived_data_path}/ModuleCache.noindex"),
          File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/MyApp/IntermediateBuildFilesPath/ReactNativeCacheCocoapods.build"),
          File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/MyApp/IntermediateBuildFilesPath/XCBuildData"),
          File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/MyApp/BuildProductsPath/SwiftSupport"),
          File.expand_path("#{ios_derived_data_path}/Build/Intermediates.noindex/ArchiveIntermediates/MyApp/PrecompiledHeaders")
        ]
        dirs.each { |dir| FileUtils.rm_rf(dir) }
      end

      # Publish to firebase...
    end

end



